Props drilling é um problema em React, que acontece quando um componente pai passa propriedades para componentes filhos, 
e algum filho que não precisa dessa propriedade, acaba tendo que receber essa propriedade, para compartilhar com os outros filhos.

Props drilling é um padrão que ocorre em aplicações React quando você precisa passar dados 
de um componente pai para um componente filho que está localizado em um nível mais profundo 
na árvore de componentes. O problema surge quando o componente intermediário não usa diretamente 
os dados, mas ainda assim precisa repassá-los para seus próprios filhos.


//exemplo não usando context:

const ComponentePai = () => {
    const produto = fetchData(); // Dados de uma api qualquer
    return (
        <ComponenteFilhoA produto={produto} />
    );
};

const ComponenteFilhoA = ({ produto }) => {
    return (
        <ComponenteFilhoB produto={produto} />
    );
};

const ComponenteFilhoB = ({ produto }) => {
    return (
        <ComponenteFilhoC produto={produto} />
    );
};

// e assim em diante..



Usando o hook de contexto para resolver esse problema, podemos criar um contexto na aplicação e compartilhar ele 
com todos os nossos componentes, fazendo com que somente quem realmente precisa dos dados compartilhados faça o uso.

//exemplo usando context:

import React, { createContext, useContext } from 'react';


const DataContext = createContext();

const ComponentePai = () => {
    const produto = fetchData(); // Dados de uma api qualquer
    return (
        <DataContext.Provider value={produto}>
            <ComponenteFilhoA />
        </DataContext.Provider>
    );
};

const ComponenteFilhoA = () => {
    return (
        <ComponenteFilhoB />
    );
};

const ComponenteFilhoB = () => {
    return (
        <ComponenteFilhoC />
    );
};

const ComponenteFilhoC = () => {
    const produto = useContext(DataContext);
    return (
        <div>{JSON.stringify(produto)}</div>
    );
};


Assim, o hook useContext pode solucionar o problema de props drilling.
