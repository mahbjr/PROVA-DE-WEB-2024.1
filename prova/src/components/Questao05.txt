Props drilling  ocorre quando você precisa passar dados de um componente pai para um componente 
filho que está localizado em um nível mais profundo na árvore de componentes. O problema surge
quando os componentes intermediários não usam diretamente os dados, mas ainda assim precisam 
repassá-los para seus próprios filhos.


//exemplo não usando context:

const ComponentePai = () => {
    const produto = fetchData(); // Dados de uma api qualquer
    return (
        <ComponenteFilhoA produto={produto} />
    );
};

const ComponenteFilhoA = ({ produto }) => {
    return (
        <ComponenteFilhoB produto={produto} />
    );
};

const ComponenteFilhoB = ({ produto }) => {
    return (
        <ComponenteFilhoC produto={produto} />
    );
};

// e assim em diante..



O hook de contexto consegue resolver esse problema, podendo criar um contexto na aplicação 
e compartilhar ele com todos os nossos componentes, fazendo com que somente quem realmente 
precisa dos dados compartilhados faça o uso.

//exemplo usando context:

import React, { createContext, useContext } from 'react';


const DataContext = createContext();

const ComponentePai = () => {
    const produto = fetchData(); // Dados de uma api qualquer
    return (
        <DataContext.Provider value={produto}>
            <ComponenteFilhoA />
        </DataContext.Provider>
    );
};

const ComponenteFilhoA = () => {
    return (
        <ComponenteFilhoB />
    );
};

const ComponenteFilhoB = () => {
    return (
        <ComponenteFilhoC />
    );
};

const ComponenteFilhoC = () => {
    const produto = useContext(DataContext);
    return (
        <div>{JSON.stringify(produto)}</div>
    );
};


Assim, o hook useContext pode solucionar o problema de props drilling.
